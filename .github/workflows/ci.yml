name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # Cache pip dependencies
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install Python dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # Run Linting
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 app

      # Run Tests
      - name: Run tests with pytest
        run: |
          pip install pytest
          pytest

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # Checkout the repository
      - uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub (or other container registry)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker buildx build --push \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.sha }} \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest .

  helm-package:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      # Checkout the repository
      - uses: actions/checkout@v2

      # Install Helm
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1

      # Package Helm chart
      - name: Package Helm chart
        run: |
          helm lint helm-chart
          helm package helm-chart --version $(date +%Y%m%d%H%M%S) --app-version ${{ github.sha }}

      # Upload Helm chart as build artifact
      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: "*.tgz"

  deploy:
    runs-on: ubuntu-latest
    needs: helm-package
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Helm chart artifact
        uses: actions/download-artifact@v3
        with:
          name: helm-chart

      - name: Deploy with Helm
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          helm upgrade --install myapp ./myapp-*.tgz --namespace default
