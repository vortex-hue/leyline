name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # lint-and-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.10"

  #     - name: Cache dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-

  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt

  #     - name: Lint with pylint
  #       run: |
  #         pip install pylint
  #         pylint app --exit-zero --output-format=colorized > pylint-output.txt || true
  #       continue-on-error: true

  #     - name: Display pylint output
  #       if: always()
  #       run: |
  #         cat pylint-output.txt

  #     - name: Run tests with pytest
  #       run: |
  #         pip install pytest
  #         pytest || true
  #       continue-on-error: true

  docker-compose-build-and-test:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Build and run Docker Compose services
        run: |
          docker-compose up -d --build
          sleep 20  # Wait for services to initialize
          docker-compose ps  # Check running containers for debugging purposes

      - name: Run integration tests
        run: |
          curl --fail http://localhost:3000/health || true
        continue-on-error: true

      - name: Stop Docker Compose services
        run: |
          docker-compose down

  docker-push:
    runs-on: ubuntu-latest
    needs: docker-compose-build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Tag and Push Docker image
        run: |
          echo "Using IMAGE_NAME: $IMAGE_NAME"
          if [ -z "$IMAGE_NAME" ]; then
            echo "Error: IMAGE_NAME is not set."
            exit 1
          fi
          docker tag $IMAGE_NAME ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.sha }}
          docker tag $IMAGE_NAME ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
        env:
          IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

  helm-package:
    runs-on: ubuntu-latest
    needs: docker-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1

      - name: Package Helm chart
        run: |
          helm lint helm-chart
          helm package helm-chart --version $(date +%Y%m%d%H%M%S) --app-version ${{ github.sha }}

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: "*.tgz"
