name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Lint with pylint
        run: |
          pip install pylint
          pylint app --exit-zero --output-format=colorized > pylint-output.txt || true
        continue-on-error: true
      - name: Display pylint output
        if: always()
        run: |
          cat pylint-output.txt
      - name: Run tests with pytest
        run: |
          pip install pytest
          pytest || true
        continue-on-error: true

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest

  helm-package:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1
      - name: Package Helm chart
        run: |
          helm lint helm-chart
          helm package helm-chart --version $(date +%Y%m%d%H%M%S) --app-version ${{ github.sha }}
      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: "*.tgz"

  deploy:
    runs-on: ubuntu-latest
    needs: helm-package
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Helm chart artifact
        uses: actions/download-artifact@v3
        with:
          name: helm-chart

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: "v1.21.0" # specify the kubectl version

      - name: Update kubeconfig
        run: |
          aws eks get-token --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} > token.txt
          aws eks get-cluster-info --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} > cluster-info.json
          cluster_endpoint=$(jq -r '.cluster.endpoint' cluster-info.json)
          certificate=$(jq -r '.cluster.certificateAuthority.data' cluster-info.json)

          cat << EOF > kubeconfig
          apiVersion: v1
          clusters:
          - cluster:
              server: ${cluster_endpoint}
              certificate-authority-data: ${certificate}
            name: eks_cluster
          contexts:
          - context:
              cluster: eks_cluster
              user: eks_user
            name: eks_context
          current-context: eks_context
          kind: Config
          users:
          - name: eks_user
            user:
              token: $(cat token.txt)
          EOF

          export KUBECONFIG=./kubeconfig

      - name: Verify Kubernetes connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install myapp *.tgz \
            --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/myapp \
            --set image.tag=${{ github.sha }}
        env:
          KUBECONFIG: ./kubeconfig
