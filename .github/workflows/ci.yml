name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Lint with pylint
        run: |
          pip install pylint
          pylint app --exit-zero --output-format=colorized > pylint-output.txt || true
        continue-on-error: true

      - name: Display pylint output
        if: always()
        run: |
          cat pylint-output.txt

      - name: Run tests with pytest
        run: |
          pip install pytest
          pytest || true
        continue-on-error: true

  build-and-package:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate version
        id: generate_version
        run: |
          VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::8}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: |
            myapp:${{ steps.generate_version.outputs.version }}
            myapp:latest
          outputs: type=docker,dest=/tmp/myapp-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: /tmp/myapp-image.tar

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: "v3.8.0"

      - name: Package Helm chart
        run: |
          helm package ./helm/myapp --version ${{ steps.generate_version.outputs.version }} --app-version ${{ steps.generate_version.outputs.version }}

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v2
        with:
          name: helm-chart
          path: myapp-${{ steps.generate_version.outputs.version }}.tgz

  docker-push:
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/myapp-image.tar
          docker image ls -a

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        run: |
          VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::8}
          docker tag myapp:$VERSION ${{ secrets.DOCKERHUB_USERNAME }}/myapp:$VERSION
          docker tag myapp:$VERSION ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Helm chart artifact
        uses: actions/download-artifact@v2
        with:
          name: helm-chart

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: "v3.8.0"

      - name: Deploy to Kubernetes
        run: |
          VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::8}
          helm upgrade --install myapp ./myapp-$VERSION.tgz \
            --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/myapp \
            --set image.tag=$VERSION
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
